<#@ template language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Text;
using System.Runtime.CompilerServices;

namespace Shipwreck.FfmpegUtil
{
    partial class BufferObject
    {
<#
var integers = new [] { "Byte", "SByte", "Int16", "UInt16", "Int32", "UInt32", "Int64", "UInt64" };
var floats = new [] { "Single", "Double" };
var structs = new [] { "Decimal", "DateTime", "DateTimeOffset", "TimeSpan", "StreamSpecifier" };

foreach (var T in integers.Concat(floats).Concat(new [] { "Boolean" }).Concat(structs))
{
#>
        protected unsafe <#= T #> Get<#= T #>([CallerMemberName]string property = null)
        {
            <#= T #> r;
            return TryGetValue(GetPropertyIndex(property), (byte*)&r) ? r : default(<#= T #>);
        }

        protected unsafe void SetValue(<#= T #> value, [CallerMemberName]string property = null)
        {
            var p = GetPropertyIndex(property);
            if (value == default(<#= T #>))
            {
                RemoveValue(p);
            }
            else
            {
                SetValue(p, (short)sizeof(<#= T #>), (byte*)&value);
            }
        }

        protected unsafe <#= T #>? GetNullable<#= T #>([CallerMemberName]string property = null)
        {
            <#= T #> r;
            return TryGetValue(GetPropertyIndex(property), (byte*)&r) ? r : (<#= T #>?)null;
        }

        protected unsafe void SetValue(<#= T #>? value, [CallerMemberName]string property = null)
        {
            var p = GetPropertyIndex(property);
            if (value == null)
            {
                RemoveValue(p);
            }
            else
            {
                var v = value.Value;
                SetValue(p, (short)sizeof(<#= T #>), (byte*)&v);
            }
        }

<#
}
#>
    }
	partial class StringBuilderHelper
	{
<#
foreach (var T in integers.Concat(new [] { "StreamSpecifier" }))
{
#>
        public static StringBuilder AppendIf(this StringBuilder b, string key, <#= T #> value)
        {
            if (value != default(<#= T #>))
            {
                b.Append(key).Append(' ').Append(value).Append(' ');
            }
            return b;
        }

        public static StringBuilder AppendIfStream(this StringBuilder b, string key, string streamSpecifier, <#= T #> value)
        {
            if (value != default(<#= T #>))
            {
                b.Append(key);
                if (!string.IsNullOrEmpty(streamSpecifier))
                {
                    b.Append(':');
                    b.Append(streamSpecifier);
                }

                b.Append(' ');
                b.Append(value);
                b.Append(' ');
            }

            return b;
        }
<#
}
foreach (var T in floats)
{
#>
        public static StringBuilder AppendIf(this StringBuilder b, string key, <#= T #> value, string format = "0.###")
        {
            if (value != default(<#= T #>))
            {
                b.Append(key).Append(' ').Append(value.ToString(format)).Append(' ');
            }
            return b;
        }

        public static StringBuilder AppendIfStream(this StringBuilder b, string key, string streamSpecifier, <#= T #> value, string format = "0.###")
        {
            if (value != default(<#= T #>))
            {
                b.Append(key);
                if (!string.IsNullOrEmpty(streamSpecifier))
                {
                    b.Append(':');
                    b.Append(streamSpecifier);
                }

                b.Append(' ');
                b.Append(value.ToString(format));
                b.Append(' ');
            }

            return b;
        }
<#
}
#>
	}
}